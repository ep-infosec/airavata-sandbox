/*
*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*
*/
package org.apache.airavata.datacat.parsers.gridchem.cbsQ;/* The following code was generated by JFlex 1.4.3 on 9/10/14 8:08 AM */

import java_cup.runtime.*;
import org.apache.airavata.datacat.parsers.gridchem.Settings;

import java.io.IOException;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/10/14 8:08 AM from the specification file
 * <tt>cbsQ.flex</tt>
 */
public class CBSQLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int FLOATMP3 = 24;
  public static final int ITER2 = 4;
  public static final int FLOATMP2 = 22;
  public static final int FLOATMP1 = 20;
  public static final int MPOPT = 18;
  public static final int INTMP = 28;
  public static final int INTVALUE = 8;
  public static final int IGNOREALL = 26;
  public static final int ITER = 2;
  public static final int YYINITIAL = 0;
  public static final int MP2 = 16;
  public static final int FLOAT2 = 14;
  public static final int FLOAT1 = 12;
  public static final int FLOATVALUE = 10;
  public static final int ITER3 = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 
     7,  7,  8,  8,  9,  9, 10, 10, 11, 11,  2,  2, 12, 12
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    13,  0,  0,  0,  0,  0,  0, 46, 28,  6,  0,  3,  0, 42,  4,  1, 
     2, 44, 40, 43,  2,  2, 41,  2,  2,  2, 26,  0,  0,  5,  0,  0, 
     0,  0,  0, 23, 25, 27, 24, 45, 30,  0,  0,  0,  0, 31,  7, 35, 
    39,  0, 29, 22,  0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 32, 10, 34, 38, 11, 15,  0, 21, 19,  0,  0, 37,  9, 20, 14, 
    18,  0, 12, 16, 17,  8,  0,  0, 33,  0, 36,  0,  3,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\15\0\6\1\1\2\23\1\1\3\1\1\36\0\1\4"+
    "\1\5\1\6\6\0\1\7\1\10\1\11\70\0\1\12"+
    "\32\0\1\13\5\0\1\14\16\0\1\15\1\16\2\0"+
    "\1\17\1\20\33\0\1\21\14\0\1\22\1\23\1\24"+
    "\4\0\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0"+
    "\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u03c0"+
    "\0\u0870\0\u0420\0\u08a0\0\u0480\0\u08d0\0\u0900\0\u0930\0\u0960"+
    "\0\u0990\0\u09c0\0\u09f0\0\u0600\0\u0a20\0\u0660\0\u0a50\0\u06c0"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0a20\0\u0a50\0\u0a80\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0"+
    "\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0"+
    "\0\u16e0\0\u1710\0\u1740\0\u0270\0\u1770\0\u17a0\0\u17d0\0\u1800"+
    "\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980"+
    "\0\u19b0\0\u19e0\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00"+
    "\0\u1b30\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u0270\0\u1c50"+
    "\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10\0\u0270\0\u1d40\0\u1d70\0\u1da0"+
    "\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20"+
    "\0\u1f50\0\u1f80\0\u1fb0\0\u0270\0\u0270\0\u1fe0\0\u2010\0\u0270"+
    "\0\u0270\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160"+
    "\0\u2190\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0"+
    "\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u2460"+
    "\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u0270\0\u2550\0\u2580\0\u25b0"+
    "\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\u2730"+
    "\0\u2760\0\u0270\0\u0270\0\u0270\0\u2790\0\u27c0\0\u27f0\0\u2820"+
    "\0\u0270";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\7\16\1\17\76\16\1\20\6\16\1\21\1\16\1\22"+
    "\3\16\1\23\76\16\1\24\1\25\44\16\2\24\1\25"+
    "\2\24\5\16\1\26\1\27\44\16\2\26\1\27\2\26"+
    "\5\16\1\30\1\31\44\16\2\30\1\31\2\30\5\16"+
    "\1\32\1\33\44\16\2\32\1\33\2\32\42\16\1\34"+
    "\46\16\1\35\4\16\1\36\1\16\1\37\1\16\1\40"+
    "\3\16\1\41\16\16\1\42\1\43\44\16\2\42\1\43"+
    "\2\42\5\16\1\44\1\45\44\16\2\44\1\45\2\44"+
    "\5\16\1\46\1\47\44\16\2\46\1\47\2\46\5\16"+
    "\1\50\1\51\44\16\2\50\1\51\2\50\3\16\70\0"+
    "\1\52\70\0\1\53\5\0\1\54\67\0\1\55\60\0"+
    "\1\56\41\0\1\57\37\0\1\24\45\0\2\24\1\0"+
    "\2\24\5\0\1\60\1\0\1\61\43\0\2\60\1\0"+
    "\2\60\5\0\1\60\45\0\2\60\1\0\2\60\5\0"+
    "\1\62\1\0\1\63\43\0\2\62\1\0\2\62\5\0"+
    "\1\62\45\0\2\62\1\0\2\62\5\0\1\64\1\0"+
    "\1\65\43\0\2\64\1\0\2\64\5\0\1\64\45\0"+
    "\2\64\1\0\2\64\52\0\1\66\31\0\1\67\115\0"+
    "\1\70\37\0\1\71\60\0\1\72\41\0\1\73\37\0"+
    "\1\74\1\0\1\75\43\0\2\74\1\0\2\74\5\0"+
    "\1\74\45\0\2\74\1\0\2\74\5\0\1\76\1\0"+
    "\1\77\43\0\2\76\1\0\2\76\5\0\1\76\45\0"+
    "\2\76\1\0\2\76\5\0\1\100\1\0\1\101\43\0"+
    "\2\100\1\0\2\100\5\0\1\100\45\0\2\100\1\0"+
    "\2\100\5\0\1\50\45\0\2\50\1\0\2\50\14\0"+
    "\1\102\61\0\1\103\74\0\1\104\55\0\1\105\72\0"+
    "\1\106\37\0\1\107\40\0\1\110\45\0\2\110\1\0"+
    "\2\110\5\0\1\111\45\0\2\111\1\0\2\111\5\0"+
    "\1\112\45\0\2\112\1\0\2\112\53\0\1\113\22\0"+
    "\1\114\103\0\1\115\46\0\1\116\72\0\1\117\37\0"+
    "\1\120\40\0\1\121\45\0\2\121\1\0\2\121\5\0"+
    "\1\122\45\0\2\122\1\0\2\122\5\0\1\123\45\0"+
    "\2\123\1\0\2\123\15\0\1\124\67\0\1\125\52\0"+
    "\1\126\57\0\1\127\65\0\1\130\57\0\1\131\35\0"+
    "\1\132\100\0\1\133\104\0\1\134\25\0\1\135\65\0"+
    "\1\136\57\0\1\137\47\0\1\140\61\0\1\141\73\0"+
    "\1\142\43\0\1\143\53\0\1\144\57\0\1\145\117\0"+
    "\1\146\23\0\1\147\112\0\1\150\24\0\1\151\53\0"+
    "\1\152\57\0\1\153\62\0\1\154\67\0\1\155\51\0"+
    "\1\156\56\0\1\157\52\0\1\160\72\0\1\161\106\0"+
    "\1\162\31\0\1\163\50\0\1\164\57\0\1\165\52\0"+
    "\1\166\72\0\1\167\51\0\1\170\52\0\1\171\73\0"+
    "\1\172\50\0\1\173\53\0\1\174\112\0\1\175\66\0"+
    "\1\176\14\0\1\177\54\0\1\200\67\0\1\201\53\0"+
    "\1\202\112\0\1\203\31\0\1\204\52\0\1\205\61\0"+
    "\1\206\61\0\1\207\57\0\1\210\102\0\1\211\73\0"+
    "\1\212\14\0\1\213\63\0\1\214\57\0\1\215\57\0"+
    "\1\216\102\0\1\217\36\0\1\220\52\0\1\221\77\0"+
    "\1\222\55\0\1\223\57\0\1\224\50\0\1\225\113\0"+
    "\1\226\14\0\1\227\75\0\1\230\57\0\1\231\50\0"+
    "\1\232\53\0\1\233\55\0\1\234\61\0\1\235\60\0"+
    "\1\236\57\0\1\237\64\0\1\240\70\0\1\241\36\0"+
    "\1\242\62\0\1\243\57\0\1\244\64\0\1\245\54\0"+
    "\1\246\53\0\1\247\60\0\1\250\56\0\1\251\57\0"+
    "\1\252\61\0\1\253\107\0\1\254\25\0\1\255\57\0"+
    "\1\256\57\0\1\257\61\0\1\260\62\0\1\261\71\0"+
    "\1\262\66\0\1\263\57\0\1\264\41\0\1\265\111\0"+
    "\1\266\43\0\1\267\57\0\1\270\41\0\1\271\46\0"+
    "\1\272\100\0\1\273\36\0\1\274\57\0\1\275\61\0"+
    "\1\276\50\0\1\277\64\0\1\300\57\0\1\301\61\0"+
    "\1\302\64\0\1\303\72\0\1\304\64\0\1\305\32\0"+
    "\1\306\104\0\1\307\35\0\1\310\75\0\1\311\37\0"+
    "\1\312\104\0\1\313\32\0\1\314\56\0\1\315\72\0"+
    "\1\316\40\0\1\317\70\0\1\320\46\0\1\321\71\0"+
    "\1\322\42\0\1\323\73\0\1\324\56\0\1\325\60\0"+
    "\1\326\61\0\1\327\50\0\1\330\107\0\1\331\17\0"+
    "\1\332\117\0\1\333\27\0\1\334\47\0\1\335\65\0"+
    "\1\336\101\0\1\337\35\0\1\340\65\0\1\341\57\0"+
    "\1\342\65\0\1\343\51\0\1\344\63\0\1\345\45\0"+
    "\1\346\74\0\1\347\42\0\1\350\67\0\1\351\102\0"+
    "\1\352\40\0\1\353\76\0\1\354\31\0\1\355\54\0"+
    "\1\356\56\0\1\357\53\0\1\360\73\0\1\361\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10320];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\15\0\1\11\33\1\36\0\3\1\6\0\3\1\70\0"+
    "\1\11\32\0\1\11\5\0\1\11\16\0\2\11\2\0"+
    "\2\11\33\0\1\11\14\0\3\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public static boolean DEBUG = false;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CBSQLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CBSQLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { yybegin(IGNOREALL);
      return new Symbol(CbsQSym.MPDONE);
          }
        case 22: break;
        case 5: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found the maximum force");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(CbsQSym.MGRAD1, new Float(yytext()));
          }
        case 23: break;
        case 15: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found RMS Force");
            yybegin(FLOATMP3);
            return new Symbol(CbsQSym.MPRms);
          }
        case 24: break;
        case 8: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: MP2 Found the maximum force");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(MPOPT);
   return new Symbol(CbsQSym.MPMGRAD, new Float(yytext()));
          }
        case 25: break;
        case 19: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found MP2(Full)");
            yybegin(MPOPT);
            return new Symbol(CbsQSym.MPStart);
          }
        case 26: break;
        case 4: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found the energy in FLOATVALUE");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(CbsQSym.ENERGY1, new Float(yytext()));
          }
        case 27: break;
        case 21: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found Number of steps");
	   yybegin(ITER);
	   return new Symbol(CbsQSym.FOUNDITER1);
          }
        case 28: break;
        case 11: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found the Step number");
   yybegin(INTVALUE);
   return new Symbol(CbsQSym.NSearch1);
          }
        case 29: break;
        case 13: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found RMS Force");
            yybegin(FLOAT2);
            return new Symbol(CbsQSym.RmsGrad1);
          }
        case 30: break;
        case 18: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: SCFDONE1, Optimization completed"); 
     yybegin(MP2);
      return new Symbol(CbsQSym.SCFDONE1);
          }
        case 31: break;
        case 17: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found the energy in ITER");
               yybegin(FLOATVALUE);
              return new Symbol(CbsQSym.Energ1);
          }
        case 32: break;
        case 9: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: MP2 Found the RMS force");   
if (Settings.DEBUG) System.out.println(yytext());
   yybegin(MPOPT);
   return new Symbol(CbsQSym.MPRGRAD, new Float(yytext()));
          }
        case 33: break;
        case 14: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found Maximum Force");
            yybegin(FLOAT1);
            return new Symbol(CbsQSym.MaxGrad1);
          }
        case 34: break;
        case 2: 
          { if  (Settings.DEBUG) System.out.println("CBSQFlex: Found iteration");
   if (Settings.DEBUG) System.out.println(yytext());
  yybegin (ITER);
   return new Symbol(CbsQSym.ITERATION1, new Integer(yytext()));
          }
        case 35: break;
        case 6: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found the RMS force");   
if (Settings.DEBUG) System.out.println(yytext());
   yybegin(ITER);
   return new Symbol(CbsQSym.RGRAD1, new Float(yytext()));
          }
        case 36: break;
        case 16: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found Maximum Force");
            yybegin(FLOATMP2);
            return new Symbol(CbsQSym.MPMax);
          }
        case 37: break;
        case 7: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: MP2 Found the energy");
   if (Settings.DEBUG) System.out.println(yytext());
   yybegin(MPOPT);
   return new Symbol(CbsQSym.MPENERGY, new Float(yytext()));
          }
        case 38: break;
        case 3: 
          { if  (Settings.DEBUG) System.out.println("CBSQFlex: MP2 Found iteration");
   if (Settings.DEBUG) System.out.println(yytext());
  yybegin (MPOPT);
   return new Symbol(CbsQSym.MPITER, new Integer(yytext()));
          }
        case 39: break;
        case 12: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found the Step number for MP");
   yybegin(INTMP);
   return new Symbol(CbsQSym.NMP);
          }
        case 40: break;
        case 10: 
          { if (Settings.DEBUG) System.out.println("CBSQFlex: Found MP2 energy");
               yybegin(FLOATMP1);
              return new Symbol(CbsQSym.MPEnerg);
          }
        case 41: break;
        case 1: 
          { 
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new Symbol(CbsQSym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = CbsQSym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java CBSQLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        CBSQLexer scanner = null;
        try {
          scanner = new CBSQLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
